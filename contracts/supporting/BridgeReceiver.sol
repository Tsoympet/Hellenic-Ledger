// SPDX-License-Identifier: MIT
pragma solidity ^0.8.28;

import "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol";
import "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol";
import "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol";

interface ILayerZeroEndpoint {
    function receivePayload(uint16 srcChainId, bytes calldata srcAddress, address dstAddress, uint64 nonce, uint256 gasLimit, bytes calldata payload) external;
}

interface IToken {
    function mint(address to, uint256 amount) external;
    function burn(address from, uint256 amount) external;
}

contract BridgeReceiver is Initializable, OwnableUpgradeable {
    address public layerZeroEndpoint;
    address public talanton;
    address public drachma;
    address public obolos;

    event TokensBridged(address indexed token, address indexed recipient, uint256 amount);

    function initialize(address _layerZeroEndpoint, address _talanton, address _drachma, address _obolos) external initializer {
        __Ownable_init(msg.sender); // Owned by Politeia post-deployment
        layerZeroEndpoint = _layerZeroEndpoint;
        talanton = _talanton;
        drachma = _drachma;
        obolos = _obolos;
    }

    function lzReceive(uint16 srcChainId, bytes calldata srcAddress, uint64 nonce, bytes calldata payload) external {
        require(msg.sender == layerZeroEndpoint, "Only LayerZero endpoint can call");
        (address token, address recipient, uint256 amount) = abi.decode(payload, (address, address, uint256));
        require(token == talanton || token == drachma || token == obolos, "Invalid token");
        IToken(token).mint(recipient, amount);
        emit TokensBridged(token, recipient, amount);
    }

    function burnForBridge(address token, uint256 amount, uint16 dstChainId, bytes calldata dstAddress) external {
        require(token == talanton || token == drachma || token == obolos, "Invalid token");
        IToken(token).burn(msg.sender, amount);
        bytes memory payload = abi.encode(token, msg.sender, amount);
        ILayerZeroEndpoint(layerZeroEndpoint).receivePayload(dstChainId, dstAddress, address(this), 0, 0, payload);
    }
}






















































































































































































































































 
















































































































































































































































